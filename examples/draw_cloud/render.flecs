// To see what the result of parsing this file looks like, copy the code and
// paste it into the editor at https://flecs.dev/explorer
//
// To load this file yourself, call ecs_plecs_from_file("expressions.flecs");

using flecs.meta












renderings
{


	attributes {
		points {
			- sg.Attributes
			position {
				- sg.Location{0}
				- sg.Attribute{offset: 0, buffer_index: 0}
				- (sg.VertexFormat, sg.Float4)
			}
			color0 {
				- sg.Location{1}
				- sg.Attribute{offset: 0, buffer_index: 0}
				- (sg.VertexFormat, sg.Ubyte4n)
			}
		}
		instances {
			- sg.Attributes
			position {
				- sg.Location{0}
				- sg.AttributeShapePosition
			}
			normal {
				- sg.Location{1}
				- sg.AttributeShapeNormal
			}
			texcoord {
				- sg.Location{2}
				- sg.AttributeShapeTextcoord
			}
			color0 {
				- sg.Location{3}
				- sg.AttributeShapeColor
			}
			inst_pos {
				- sg.Location{4}
				- sg.Attribute{offset: 0, buffer_index: 1}
				- (sg.VertexFormat, sg.Float3)
			}
		}
		shapes {
			- sg.Attributes
			position {
				- sg.Location{0}
				- sg.AttributeShapePosition
			}
			normal {
				- sg.Location{1}
				- sg.AttributeShapeNormal
			}
			texcoord {
				- sg.Location{2}
				- sg.AttributeShapeTextcoord
			}
			color0 {
				- sg.Location{3}
				- sg.AttributeShapeColor
			}
		}
	}




	ubs
	{
		standard {
			- sg.UniformBlocks
			ub0 {
				- sg.UniformBlock{index:0, size:80}
				vs_params {
					- sg.Uniform{index:0, array_count:5}
					- (sg.UniformType, sg.Float4)
				}
			}
		}
	}





	shaders {
		points : attributes.points, ubs.standard {
			- sg.ShaderCreate{filename_fs:"../../viz/src/shaders/points.fs.glsl", filename_vs:"../../viz/src/shaders/points.vs.glsl"}
			- sg.shaders.Entry//{"main"}
		}

		instances : attributes.instances, ubs.standard {
			- sg.ShaderCreate{filename_fs:"../../viz/src/shaders/instance.fs.glsl", filename_vs:"../../viz/src/shaders/instance.vs.glsl"}
			- sg.shaders.Entry//{"main"}
		}

		shapes : attributes.shapes, ubs.standard {
			- sg.ShaderCreate{filename_fs:"../../viz/src/shaders/shapes.fs.glsl", filename_vs:"../../viz/src/shaders/shapes.vs.glsl"}
			- sg.shaders.Entry//{"main"}
		}
	}


	pipes {
		points : shaders.points {
			- sg.PipelineCreate
			- (sg.PrimitiveType, sg.Points)
			- (sg.CullMode, sg.None)
			- (sg.IndexType, sg.None)
		}

		instances : shaders.instances {
			- sg.PipelineCreate
			- (sg.PrimitiveType, sg.Lines)
			- (sg.CullMode, sg.Back)
			- (sg.IndexType, sg.U16)
			
			buf0 {
				- sg.VertexBufferLayoutShape
			}
			buf1 {
				// step_func = 2 : SG_VERTEXSTEP_PER_INSTANCE
				- sg.VertexBufferLayout{stride:0, step_func:2, step_rate:0}
			}
		}

		shapes : shaders.shapes {
			- sg.PipelineCreate
			- (sg.PrimitiveType, sg.Lines)
			- (sg.CullMode, sg.Back)
			- (sg.IndexType, sg.U16)
			buf0 {
				- sg.VertexBufferLayoutShape
			}
		}
	}

}




